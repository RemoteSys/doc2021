   1: >>> import sys
   2: >>> sys
<module 'sys' (built-in)>
   3: >>> sys.path
['/home/u1/anaconda3/envs/lab1/bin',
 '/home/u1/anaconda3/envs/lab1/lib/python39.zip',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/lib-dynload',
 '',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/site-packages',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/site-packages/IPython/extensions',
 '/home/u1/.ipython']
   4: >>> type(sys.path)
list
   5: >>> sys.path[0]
'/home/u1/anaconda3/envs/lab1/bin'
   6: >>> from math import *
   7: >>> dir(math)
   8: >>> import math
   9: >>> dir(math)
  10: >>> from math import cos as coss

  12: >>> %pwd
'/home/u1'
  13: >>> %cd 22_dydaktyka/06Doktor/

  16: >>> sys.path.append('/home/u1/22_dydaktyka/06Doktor')
  17: >>> sys.path
['/home/u1/anaconda3/envs/lab1/bin',
 '/home/u1/anaconda3/envs/lab1/lib/python39.zip',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/lib-dynload',
 '',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/site-packages',
 '/home/u1/anaconda3/envs/lab1/lib/python3.9/site-packages/IPython/extensions',
 '/home/u1/.ipython',
 '/home/u1/22_dydaktyka/06Doktor']



#-------------------------- generowanie danych -----------------------------------------------


  19: >>> import random as rn

  21: >>> rn.seed.__doc__
'Initialize internal state from a seed.\n\n        The only supported seed types are None, int, float,\n        str, bytes, and bytearray.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If *a* is an int, all bits are used.\n\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1 (provided for reproducing random\n        sequences from older versions of Python), the algorithm for str and\n        bytes generates a narrower range of seeds.\n\n        '

  23: >>> rn.randint(1,10)
9
  24: >>> rn.seed(11)
  25: >>> rn.randint(1,10)
8
  26: >>> rn.seed(11)
  27: >>> rn.randint(1,10)
8
  28: >>> # symulacja pomiarów: wartość 10, wyników - 20
  29: >>> v = [10 for _ in range(20)]

  32: >>> rn.gauss(5,3)
8.93253132608605
  33: >>> rn.gauss(0,0.55)
-0.8101249483996215

  35: >>> [x*(1+rn.gauss(0,0.15)) for x in v]
[10.37277092115362,
 10.15623451521337,
 11.475664598689237,
 8.606648719393576,
 10.234228177288395,
 8.687574981610961,
 9.168261149268517,
 9.465102000225272,
 10.12842987203188,
 11.24543251934562,
 10.63194327567179,
 10.018245175465633,
 9.136791375330722,
 8.733226109930609,
 6.703640497479797,
 8.899843035813563,
 10.994928471558119,
 10.573340369533273,
 10.090280584662095,
 8.203199008926322]
  36: >>> [round(x*(1+rn.gauss(0,0.15)),3) for x in v]
[11.897,
 10.359,
 10.558,
 10.449,
 9.858,
 10.54,
 12.267,
 10.241,
 10.78,
 13.342,
 11.378,
 10.47,
 9.6,
 8.487,
 9.087,
 9.597,
 9.382,
 8.789,
 9.902,
 10.243]
  37: >>> rn.seed(11)
  38: >>> v = [round(x*(1+rn.gauss(0,0.15)),3) for x in v]

  40: >>> # czynnik 1 i jego wartości unikalne: c1 = [1,2,3,4]
  41: >>> # 20 liczb: [1,1,1,1,2,2,2,...]
  42: >>> c1 =[]
  43: >>> [c1.extend(range(1,5)) for _ in range(5)]
[None, None, None, None, None]
  44: >>> c1
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
  45: >>> c1 = sorted(c1)
  46: >>> c1
[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]
  47: >>> len(c1)
20
  48: >>> data = {'c1':c1, 'val':v}
  49: >>> data
{'c1': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
 'val': [8.164,
  10.566,
  11.492,
  9.23,
  8.007,
  9.902,
  10.717,
  11.647,
  8.176,
  8.061,
  11.059,
  10.711,
  12.301,
  11.474,
  9.847,
  9.589,
  13.856,
  9.567,
  8.823,
  8.292]}



#-------------------------- zapis danych do pliku -----------------------------------------------


  51: >>> f = open('bbb.csv','w')
  52: >>> type(f)
_io.TextIOWrapper

  54: >>> f.write('hdaahdl\nkfjkalsjf\n\t\tkflaksl')
27
  55: >>> f.close()

  57: >>> f = open('bbb.csv')
  58: >>> tmp = f.read()
  59: >>> f.close()
  60: >>> print(tmp)
  61: >>> type(tmp)
str
  62:
>>> with open('bbb.csv','w') as f1:
...     f1.write('fhfhiewfhoihoiqhfi')
...
  63: >>> del tmp
  64: >>> tmp
  65:
>>> with open('bbb.csv') as f1:
...     tmp = f1.read()
...
  66: >>> tmp
'fhfhiewfhoihoiqhfi'

  68: >>> # konwersja danych na string postaci: '1;10.\n1;11.\n....'
  69: >>> print('1;10.\n1;11.\n')

  71: >>> data.values()
dict_values([[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4], [8.164, 10.566, 11.492, 9.23, 8.007, 9.902, 10.717, 11.647, 8.176, 8.061, 11.059, 10.711, 12.301, 11.474, 9.847, 9.589, 13.856, 9.567, 8.823, 8.292]])

  73: >>> list(zip(*data.values()))
[(1, 8.164),
 (1, 10.566),
 (1, 11.492),
 (1, 9.23),
 (1, 8.007),
 (2, 9.902),
 (2, 10.717),
 (2, 11.647),
 (2, 8.176),
 (2, 8.061),
 (3, 11.059),
 (3, 10.711),
 (3, 12.301),
 (3, 11.474),
 (3, 9.847),
 (4, 9.589),
 (4, 13.856),
 (4, 9.567),
 (4, 8.823),
 (4, 8.292)]
  74: >>> [f'{a};{b}' for a,b in list(zip(*data.values()))]
['1;8.164',
 '1;10.566',
 '1;11.492',
 '1;9.23',
 '1;8.007',
 '2;9.902',
 '2;10.717',
 '2;11.647',
 '2;8.176',
 '2;8.061',
 '3;11.059',
 '3;10.711',
 '3;12.301',
 '3;11.474',
 '3;9.847',
 '4;9.589',
 '4;13.856',
 '4;9.567',
 '4;8.823',
 '4;8.292']

  76: >>> '\n'.join([f'{a};{b}' for a,b in list(zip(*data.values()))])
'1;8.164\n1;10.566\n1;11.492\n1;9.23\n1;8.007\n2;9.902\n2;10.717\n2;11.647\n2;8.176\n2;8.061\n3;11.059\n3;10.711\n3;12.301\n3;11.474\n3;9.847\n4;9.589\n4;13.856\n4;9.567\n4;8.823\n4;8.292'

  78: >>> txt = '\n'.join([f'{a};{b}' for a,b in list(zip(*data.values()))])

  80:
>>> with open('bbb.csv','w') as f1:
...     txt = '\n'.join([f'{a};{b}' for a,b in list(zip(*data.values()))])
...     f1.write(txt)
...


#-------------------------- ANOVA -----------------------------------------------


  94: >>> sum(data['val'])
201.48100000000002
  95: >>> sum(data['val'])/len(data['val'])
10.074050000000002
  96: >>> sr = sum(data['val'])/len(data['val'])

 103: >>> # sl = {1: śre1, 2: sre2,...}
 104: >>> data
{'c1': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
 'val': [8.164,
  10.566,
  11.492,
  9.23,
  8.007,
  9.902,
  10.717,
  11.647,
  8.176,
  8.061,
  11.059,
  10.711,
  12.301,
  11.474,
  9.847,
  9.589,
  13.856,
  9.567,
  8.823,
  8.292]}
 105: >>> p = 4

 120: >>> [i for i,x in enumerate(data['c1'])]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
 121: >>> [i for i,x in enumerate(data['c1']) if x == 1]
[0, 1, 2, 3, 4]
 122: >>> [i for i,x in enumerate(data['c1']) if x == 2]
[5, 6, 7, 8, 9]
 123: >>> [[i for i,x in enumerate(data['c1']) if x == k] for set(data['c1'])]
 124: >>> [[i for i,x in enumerate(data['c1']) if x == k] for k in set(data['c1'])]
[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]
 125: >>> {k:[i for i,x in enumerate(data['c1']) if x == k] for k in set(data['c1'])}
{1: [0, 1, 2, 3, 4],
 2: [5, 6, 7, 8, 9],
 3: [10, 11, 12, 13, 14],
 4: [15, 16, 17, 18, 19]}
 126: >>> zakres = {k:[i for i,x in enumerate(data['c1']) if x == k] for k in set(data['c1'])}
 127: >>> zakres
{1: [0, 1, 2, 3, 4],
 2: [5, 6, 7, 8, 9],
 3: [10, 11, 12, 13, 14],
 4: [15, 16, 17, 18, 19]}
 128: >>> {k:(min(v),max(v)) for k,v in zakres.items()}
{1: (0, 4), 2: (5, 9), 3: (10, 14), 4: (15, 19)}

 130: >>> zakres = {k:slice(min(v),max(v)) for k,v in zakres.items()}
 131: >>> zakres
{1: slice(0, 4, None),
 2: slice(5, 9, None),
 3: slice(10, 14, None),
 4: slice(15, 19, None)}

 135: >>> srGr = {} # liczności i srednie w grupach

 140:
>>> for k,v in zakres.items():
...     l = data['val']
...     n = len(l[v])
...     srGr[k] = (n, sum(l[v])/n)
...

 150: >>> {k:v[0]*(v[1] - sr)**2 for k,v in srGr.items()}
{1: 0.1781684100000033,
 2: 0.0053144099999995744,
 3: 6.887475359999988,
 4: 0.591976359999996}
 151: >>> ssai = {k:v[0]*(v[1] - sr)**2 for k,v in srGr.items()}
 152: >>> ssai
{1: 0.1781684100000033,
 2: 0.0053144099999995744,
 3: 6.887475359999988,
 4: 0.591976359999996}
 153: >>> sum(ssai.values())
7.662934539999987
 154: >>> ssa = sum(ssai.values())
 155: >>> ssa
7.662934539999987
 156: >>> p
4
 157: >>> msa = ssa/(p-1)
 158: >>> msa
2.554311513333329

 159: >>> #### 2 etap ---------------------------------------
 160: >>> #SSR, ssri

 173: >>> ssri = {}
 174:
>>> for k,v in zakres.items():
...     l = data['val']
...     sg = srGr[k][1]
...     
...     ssri[k] = sum([(x-sg)**2 for x in l[v]])
...
 175: >>> ssri
{1: 6.435140000000005,
 2: 6.514437000000001,
 3: 1.4075227500000003,
 4: 15.768668749999998}
 176: >>> ssr = sum(ssri.values())
 177: >>> ssr
30.125768500000003
 178: >>> n = len(data['val'])
 179: >>> n
20
 180: >>> msr = ssr/(n-p)
 181: >>> msr
1.8828605312500002

 182: >>> # etap last - F
 183: >>> F = round(msa/mrs,3)
 184: >>> F = round(msa/msr,3)
 185: >>> F
1.357
 186: >>> # zad 1: działajacy kod ANOVA --> %save xxx.py


